#!/usr/bin/env python
#
# fbdb : franck's book database

import pdb
import datetime
import os
import sys
import re

import argparse
import ConfigParser

import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Float, Date, Boolean 
from sqlalchemy import ForeignKey

#import requests
#from bs4 import BeautifulSoup, SoupStrainer

try:
    from prettytable import PrettyTable
    mod_pt = True
except ImportError:
    mod_pt = False
    pass

confparser = ConfigParser.ConfigParser()
home = os.path.expanduser("~")
rc_file = ".franckdbrc"

confparser.read(os.path.join(home, rc_file))

### For adding film to your remind calendar
try:
    remind = confparser.get("fbdb", "remind")
    reminder_file = os.path.join(home, remind)
except ConfigParser.NoOptionError:
    reminder_file = None

try:
    db_url = confparser.get("fbdb", "url")
except ConfigParser.NoOptionError:
    db_location = os.path.join(home, ".fbdb.sql")
    db_url = "sqlite:///{}".format(db_location)

try:
    language = confparser.get("fbdb", "language")
except ConfigParser.NoOptionError:
    language = None

try:
    owner = confparser.get("fbdb", "owner")
except ConfigParser.NoOptionError:
    owner = None


Base = declarative_base()

class Book(Base):
    """ 
        A Book has :
            Title
            Author
            Copyright on the book read
            Original Copyright (first parution of the book)
            Language in which the book was readen
            Began to be read by User on date
            Ended to be read by User on date
            As a note on a scale of 10 ; default 5
            May has commentary from user
            Owner : who owns the book
            Location : where is the book now
            Acquired : where the book was rent ou bought or gave
            Date of acquired
            Place of acquired
            Genre/Type : Polar, Horror ...
            Synopsis : resume of the book
            Keywords

    """
    __tablename__="book"
    id = Column(Integer, primary_key=True)
    timestamp = Column(Date, default=datetime.date.today())
    title = Column(String, nullable=False)
    author = Column(String, nullable=False)
    copyright = Column(String)
    original_copyright = Column(String)
    language = Column(String)
    datebegin = Column(Date)
    dateend = Column(Date)
    note = Column(Float)
    comments = Column(String)
    read = Column(Boolean)
    owner = Column(String)
    location = Column(String)
    acquired = Column(String)
    date_of_acquired = Column(Date)
    place_of_acquired = Column(String)
    genre = Column(String)
    keywords = Column(String)
    synopsis = Column(String)

class AddBookCommand():
    __command_name__ = "add"
    
    def run(self, session, namespace):

        valuesbook = {
            "title": namespace.title,
            "author": namespace.author,
            "copyright": namespace.copyright,
            "original_copyright": namespace.original_copyright,
            "language": namespace.language,
            "datebegin": namespace.datebegin,
            "dateend" : namespace.dateend,
            "note": namespace.note,
            "comments": namespace.comments,
            "read": namespace.read,
            "owner": namespace.owner,
            "location": namespace.location,
            "acquired": namespace.acquired,
            "date_of_acquired": namespace.date_of_acquired,
            "place_of_acquired": namespace.place_of_acquired,
            "genre": namespace.genre,
            "keywords": namespace.keywords,
            "synopsis": namespace.synopsis,
            }

        try:
            new_entry = Book(**valuesbook)
            session.add(new_entry)
            session.commit()
        except sqlalchemy.exc.IntegrityError:
            print("error while adding book")
            return False
        
        print("added {} in Book database".format(
                                        namespace.title.encode("utf8")))
        if reminder_file and namespace.dateend:
            reminder = "rem {} msg %\"{} de {}%\"\n".format(
                                        namespace.dateend.isoformat(),
                                        namespace.title.encode("utf_8"),
                                        namespace.author.encode("utf_8"),
                                        )
            with open(reminder_file, 'a') as f:
                f.write(reminder)

        return True

class FindBookCommand():
    __command_name__ = "find"

    def run(self, session, namespace):
        query = session.query(Book)
        if namespace.title:
            #for keyword in namespace.title:
            keyword="%{}%".format(namespace.title)
            query = query.filter(Book.title.ilike(keyword))

        query = query.order_by(Book.note)
        query = query.all()

        for u in query:
            print("{} : {} by {}.".format(u.id, 
                                            u.title.encode("utf_8"),
                                            u.author.encode("utf_8")))

class UpdateBookCommand():
    __command_name__ = "update"

    def run(self, session, namespace):
        if not namespace.id_entry:
            print("To update, you must provide the book id entry, please")
            sys.exit(16)
        query = session.query(Book)
        try:
            to_update = query.filter(Book.id == namespace.id_entry).one()
        except sqlalchemy.orm.exc.NoResultFound:
            print("Book id doesn't exist")

        if namespace.title:
            to_update.title = namespace.title
        if namespace.author:
            to_update.author = namespace.author
        if namespace.copyright:
            to_update.copyright = namespace.copyright
        if namespace.original_copyright:
             to_update.original_copyright = namespace.original_copyright
        if namespace.datebegin:
            to_update.datebegin = namespace.datebegin
        if namespace.dateend:
            to_update.dateend = namespace.dateend
        if namespace.note:
            to_update.note = namespace.note
        if namespace.comments:
            to_update.comments = namespace.comments
        if namespace.read:
            to_update.read = namespace.read
        if namespace.owner:
            to_update.owner = namespace.owner
        if namespace.location:
            to_update.location = namespace.location
        if namespace.acquired:
            to_update.acquired = namespace.acquired
        if namespace.date_of_acquired:
            to_update.date_of_acquired = namespace.date_of_acquired
        if namespace.place_of_acquired:
            to_update.place_of_acquired = namespace.place_of_acquired
        if namespace.genre:
            to_update.genre = namespace.genre
        if namespace.synopsis:
            to_update.synopsis = namespace.synopsis
        if namespace.keywords:
            to_update.keywords = namespace.keywords
        
        session.commit()
        
        if reminder_file and namespace.dateend:
            reminder = "rem {} msg %\"{} de {}%\"\n".format(
                                        to_update.dateend.isoformat(),
                                        to_update.title,
                                        to_update.author,
                                        )
            with open(reminder_file, 'a') as f:
                f.write(reminder)

        return True


###############################################################################
#class FindFilmCommand():
#        
#        query = query.order_by(Film.note)
#        query = query.all()
#        if mod_pt:
#            pt = PrettyTable(["imdb tt", "title", "year", "dateview",
#                            "note", "comment", "seen"])
#        for u in query:
#            title = session.query(FilmAkas).filter(
#                                        FilmAkas.imdbtt == u.imdbtt
#                                        ).filter(
#                                        FilmAkas.country == "Release Info"
#                                        ).first()
#            if mod_pt:
#                pt.add_row([u.imdbtt.encode("utf_8"),
#                            title.title.encode("utf_8"),
#                            u.year, u.dateview, u.note,
#                            u.comment.encode("utf_8"), u.seen])
#            
#            else:
#                print("{} ; {} ; {} ; {} ; {} ; {} ; {}".format(
#                                                u.imdbtt.encode("utf_8"), 
#                                                title.title.encode("utf_8"),
#                                                u.year, 
#                                                u.dateview, 
#                                                u.note, 
#                                                u.comment.encode("utf_8"),
#                                                u.seen))
#        if mod_pt:
#            print(pt)
#
###############################################################################

if __name__ == "__main__":

    def process_userinput(ui):
        def _check_date(val):
            """ Return datetime.date() """
            msg = "Date must be in format [[[YY]yy]mm]dd ; date of view default to today."
            year = datetime.date.today().year
            month = datetime.date.today().month
            day = datetime.date.today().day
            #if val is None:
            #    val = datetime.date(year, month, day)
            if len(val) == 10:                      # ISOFORMAT YYYY-mm-dd
                val = datetime.date(int(val[0:4]), int(val[5:7]), int(val[8:]))
            elif len(val) == 8:                          # format YYYYmmdd
                val = datetime.date(int(val[0:4]), int(val[4:6]), int(val[6:]))
            elif len(val) == 6:                          # format YYmmdd
                val = datetime.date(int("20"+str(val[0:2])), int(val[2:4]), 
                                                                int(val[4:]))
            elif len(val) == 4:                          # format mmdd
                val = datetime.date(year, int(val[0:2]), int(val[2:]))
            elif len(val) == 2:                          # format dd
                val = datetime.date(year, month, int(val[0:]))
            else:
                val= datetime.date(year, manth, day)

            return val
        
        try:
            if ui.datebegin:
                ui.datebegin = _check_date(ui.datebegin)
        except AttributeError:
            #if command_name == "add"
            #    ui.dateview = _check_date()
            #else:
            ui.datebegin = None

        try:
            if ui.dateend:
                ui.dateend = _check_date(ui.dateend)
        except AttributeError:
            #if command_name == "add"
            #    ui.dateview = _check_date()
            #else:
            ui.dateend = None
        
        try:
            if ui.date_of_acquired:
                ui.date_of_acquired = _check_date(ui.date_of_acquired)
        except AttributeError:
            ui.date_of_acquired = None

        try:
            if ui.language:
                ui.language = ui.language.decode("utf_8")
            else:
                ui.language = language
        except AttributeError:
            ui.language = language

        try:
            if ui.note:
                float(ui.note)
        except AttributeError:
            ui.note = None
        try:
            if ui.comments:
                ui.comments = ui.comments.decode("utf_8")
        except AttributeError:
            ui.comments = None
        try:
            if ui.title:
                ui.title = ui.title.decode("utf_8")
        except AttributeError:
            ui.title = None
        try:
            if ui.author:
                ui.author = ui.author.decode("utf_8")
        except AttributeError:
            ui.author = None

        try:
            if ui.copyright:
                ui.copyright = ui.copyright.decode("utf_8")
        except AttributeError:
            ui.copyright = None
        try:
            if ui.original_copyright:
                ui.original_copyright = ui.original_copyright.decode("utf_8")
        except AttributeError:
            ui.original_copyright = None

        try:
            if ui.owner:
                ui.owner = ui.owner.decode("utf_8")
            else:
                ui.owner = owner
        except AttributeError:
            ui.owner = owner
        try:
            if ui.location:
                ui.location = ui.location.decode("utf_8")
        except AttributeError:
            ui.location = None

        try:
            if ui.acquirred:
                ui.acquirred = ui.acquirred.decode("utf_8")
        except AttributeError:
            ui.acquirred = None
        
        try:
            if ui.place_of_acquired:
                ui.place_of_acquired = ui.place_of_acquired.decode("utf_8")
        except AttributeError:
            ui.place_of_acquired = None

        try:
            if ui.genre:
                ui.genre = ui.genre.decode("utf_8")
        except AttributeError:
            ui.genre = None

        try:
            if ui.synopsis:
                ui.synopsis = ui.synopsis.decode("utf_8")
        except AttributeError:
            ui.synopsis = None

        try:
            if ui.keywords:
                ui.keywords = ui.keywords.decode("utf_8")
        except AttributeError:
            ui.keywords = None

        return ui

    parser = argparse.ArgumentParser(description="Usage=%prog")
    parser.add_argument('command_action', nargs=1,
                    choices=["add", "update", "list", "find" ],
                    help="action to perform on db (add, list...)")
    #(namespace_cmd, args) = parser.parse_known_args(sys.argv[1:])
    #command_name = namespace_cmd.command_action[0]
    
    parser.add_argument("-i", "--id", "--id_entry",
                        action="store", type=int, dest="id_entry",
                        help="Id entry for updating")
    parser.add_argument("-t", "--title",
                        action="store", dest="title",
                        help="Title of the book")
    parser.add_argument("-a", "--author",
                        action="store", dest="author",
                        help="Author of the book")
    parser.add_argument("-l", "--language",
                        action="store", dest="language",
                        help="Language of the book ; may be store in db_conf")
    parser.add_argument("--cp", "--copyright",
                        action="store", dest="copyright",
                        help="copyright of this book")
    parser.add_argument("-C", "--COPYRIGHT",
                        action="store", dest="original_copyright",
                        help="Copyright of the original book (first printed)")
    parser.add_argument("-d", "--datebegin",
                        action="store", dest="datebegin",
                        help="Date when began to read the book")
    parser.add_argument("-e", "--dateend",
                        action="store", dest="dateend",
                        help="Date when ended to read the book")
    parser.add_argument("-n", "--note", type=float,
                        action="store", dest="note",
                        help="Note of the book")
    parser.add_argument("-c", "--comments",
                        action="store", dest="comments",
                        help="Comments about this book")
    parser.add_argument("-R", "--Read",
                        action="store_true", dest="read", default=True,
                        help="Book already read ; default action")
    parser.add_argument("-U", "--Unread",
                        action="store_false", dest="read", default=True,
                        help="Book on ToRead list :)")
    parser.add_argument("-o", "--owner",
                        action="store", dest="owner",
                        help="Entity who own the book")
    parser.add_argument("-L", "--location",
                        action="store", dest="location",
                        help="where the book is")
    parser.add_argument("-A", "--acquired",
                        action="store", dest="acquired",
                        help="where the book was gotten")
    parser.add_argument("-D", "--date_of_acquired",
                        action="store", dest="date_of_acquired",
                        help="When the book was bought")
    parser.add_argument("-P", "--place_of_acquired",
                        action="store", dest="place_of_acquired",
                        help="Where the book was bought/given...")
    parser.add_argument("-g", "--genre",
                        action="store", dest="genre",
                        help="type/genre of the book")
    parser.add_argument("-s", "--synopsis",
                        action="store", dest="synopsis",
                        help="Synopsis/Resume of the book")
    parser.add_argument("-k", "--keywords", nargs='+',
                        action="store", dest="keywords",
                        help="Keywords about book subject")

    namespace = parser.parse_args(sys.argv[1:])

    commands = {
        "add": AddBookCommand,
        "find": FindBookCommand,
        "list": FindBookCommand,
        "update": UpdateBookCommand,
        }
    Command = commands[namespace.command_action[0]]
    cmd = Command()
    namespace = process_userinput(namespace)

    engine = create_engine(db_url, echo=False, convert_unicode=True)
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    session = Session()


    try:
        cmd.run(session, namespace)
    except KeyboardInterrupt:
        sys.exit(1)
